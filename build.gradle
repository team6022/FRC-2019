plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
    id 'org.hidetake.ssh' version '2.9.0'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"
//frc.robot.Main

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Maven central needed for JUnit
repositories {
    mavenCentral()
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile 'junit:junit:4.12'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}


// raspberrypi deployment script - for sure a work in progress
// shoutout to team 997 for the amazing references
// https://github.com/Team997Coders/BB2018BallFindingVision/blob/master/build.gradle

// remotes {
//     piccb {
//         host = 'lakitu.local'
//         user = 'pi'
//         password = 'raspberry'
//     }
// }

// ssh.settings {
//     knownHosts = allowAnyHosts
//     fileTransfer = 'scp'
// }

// task raspibuild {
//     ssh.run {
//         session(remotes.piccb) {
//             // Install dependencies
//             // This should bring up this project from a fresh raspbian install.
//             // You must have ssh installed first using `sudo raspi-config`.
//             // Will this work on the robo-rio?
//             // Doubt it...don't know...must test.
//             try {
//                 // this little trick will quickly determine if we are connected
//                 // to the internet and will throw an error if not
//                 execute 'nc -z 8.8.8.8 53'
//                 executeSudo 'apt-get --assume-yes update'
//                 executeSudo 'apt-get --assume-yes install dos2unix'
//                 executeSudo 'apt-get --assume-yes install python3'
//                 executeSudo 'apt-get --assume-yes install python3-pip'
//                 executeSudo 'apt-get --assume-yes install oracle-java8-jdk'
//                 executeSudo 'apt-get --assume-yes install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools'
//             } catch (Exception e)
//             {
//                 println "Could not install dependencies.  Connected to Internet?"
//             }
//             // Now copy the build
//             execute 'mkdir -p /home/pi/bin'
//             execute 'mkdir -p /home/pi/sw'

//             // put from: fileTree(binDirectory).matching { exclude 'python/**'}, into: '/home/pi/bin'
//             // put from: fileTree(dir: "${rootProject.projectDir}/CameraServer/build/python/dist"), into: '/home/pi/sw'
//             // put from: fileTree(dir: "${rootProject.projectDir}/NTSimulator/build/python/dist"), into: '/home/pi/sw'

//             // Install the build
//             // execute 'pip3 install -U --find-links file:///home/pi/sw ntserver ipcamera'
//             // execute 'chmod u+x /home/pi/bin/*.sh'
//             // execute 'dos2unix /home/pi/bin/*.sh'
//         }
//     }
// }